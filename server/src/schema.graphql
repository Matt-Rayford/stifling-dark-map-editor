type Query {
	maps: [Map]
	map(id: ID!): Map
	spaceSetting(id: String!): SpaceSetting
	spaceSettings: [SpaceSetting]
}

type Mutation {
	addMapSpaceGroup(mapId: ID, group: SpaceGroupInput): SpaceGroup
	createMap(title: String): Map
	deleteMapSpaceGroup(mapId: ID, groupId: ID): Boolean
	renameMap(mapId: ID!, mapName: String!): String
	updateMap(mapId: ID, spaceData: Object, settings: MapSettingsInput): Map
	updateMapSettings(mapId: ID, settings: MapSettingsInput): Map
	updateMapSpaceGroup(mapId: ID, group: SpaceGroupInput): SpaceGroup
	uploadMapImage(mapId: ID!, imageUrl: String!): String
}

type Map {
	id: ID!
	title: String!
	settings: MapSettings
	spaces: [Space]!
	spaceGroups: [SpaceGroup]
}

type MapSettings {
	backgroundImageUrl: String
	spaceColor: String
	horizontalSpacing: Float
	verticalSpacing: Float
	indent: Float
	paddingX: Float
	paddingY: Float
	spaceRadius: Float
}

scalar Object
scalar Array

enum LightLevel {
	BRIGHT
	DIM
	PITCH_BLACK
}

enum SpaceTypeEnum {
	ADVERSARY
	BASIC
	DOOR
	INTERACTION
	INVOLVED
	STARTING
}

type SpaceGroup {
	id: ID!
	name: String!
	prefix: String!
}

type Space {
	id: Int!
	number: Int!
	type: SpaceTypeEnum!
	lightLevel: LightLevel!
	connections: [Int]
	row: Int!
	col: Int!
	settings: SpaceSetting
	isDeleted: Boolean
	group: Int
}

type SpaceSetting {
	id: String!
	name: String!
	imageUrl: String
	fontColor: String
	spaceColor: String
}

input CreateMapInput {
	title: String
}

################################
#         INPUT TYPES          #
################################
input MapSettingsInput {
	backgroundImageUrl: String
	spaceColor: String
	horizontalSpacing: Float
	verticalSpacing: Float
	indent: Float
	paddingX: Float
	paddingY: Float
	spaceRadius: Float
}

input SpaceGroupInput {
	id: ID
	name: String!
	prefix: String!
}
